fix = true
target-version = "py312"

[lint]
select = ["ALL"]

ignore = [
    # Rule groups to ignore
    "D", # pydocstyle

    # The following rules may cause conflicts when used with the formatter
    "COM812",
    "ISC001",

    "A001",    # Variable `dir` is shadowing a Python builtin
    "A002",    # Argument `open` is shadowing a Python builtin
    "ANN001",  # Missing type annotation for function argument `benchmark`
    "ANN201",  # Missing return type annotation for public function `test_twoSumAllAnswers`
    "ANN202",  # Missing return type annotation for private function `dfs`
    "ANN204",  # Missing return type annotation for special method `__init__`
    "C413",    # Unnecessary `reversed` call around `sorted()`
    "DTZ005",  # `datetime.datetime.now()` called without a `tz` argument
    "E501",    # Line too long (90 > 88)
    "ERA001",  # Found commented-out code
    "FBT001",  # Boolean-typed positional argument in function definition
    "INP001",  # File `src/twoSumAllAnswers_test.py` is part of an implicit namespace package. Add an `__init__.py`
    "N801",    # Class name `KthLargest_sorted` should use CapWords convention
    "N802",    # Function name `test_benchmark_twoSumAllAnswers` should be lowercase
    "N803",    # Argument name `newInterval` should be lowercase
    "N806",    # Variable `MAX` in function should be lowercase
    "PERF401", # Use a list comprehension to create a transformed list
    "PIE808",  # Unnecessary `start` argument in `range`
    "PLR1736", # List index lookup in `enumerate()` loop
    "PLR2004", # Magic value used in comparison, consider replacing `2` with a constant variable
    "PT006",   # Wrong type passed to first argument of `@pytest.mark.parametrize`; expected `tuple`
    "PT007",   # Wrong values type in `@pytest.mark.parametrize` expected `list` of `tuple`
    "PYI024",  # Use `typing.NamedTuple` instead of `collections.namedtuple`
    "RUF005",  # Consider `(*subset, n)` instead of concatenation
    "S101",    # Use of `assert` detected
    "SIM102",  # Use a single `if` statement instead of nested `if` statements
    "SIM103",  # Return the condition `not str2 != str1[:divisor] * factor2` directly
    "SIM110",  # Use `return all(self.board[row][col] != num for row in range(9))` instead of `for` loop
    "TCH003",  # Move standard library import `collections.abc.Iterable` into a type-checking block
    "UP006",   # Use `list` instead of `List` for type annotation
    "UP007",   # Use `X | Y` for type annotations
    "UP034",   # Avoid extraneous parentheses
    "UP035",   # `typing.List` is deprecated, use `list` instead
]
